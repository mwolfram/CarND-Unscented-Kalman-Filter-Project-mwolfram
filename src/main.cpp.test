
#include <iostream>
#include "Eigen/Dense"
#include "ukf.h"
#include "tools.h"

using Eigen::MatrixXd;
using Eigen::VectorXd;

const double PRECISION = 0.00001;

bool testGenerateAugmentedSigmaPoints() {
    UKF ukf;

    //set example state
    ukf.x_ << 5.7441,
              1.3800,
              2.2049,
              0.5015,
              0.3528;

    //create example covariance matrix
    ukf.P_ <<  0.0043,   -0.0013,    0.0030,   -0.0022,   -0.0020,
              -0.0013,    0.0077,    0.0011,    0.0071,    0.0060,
               0.0030,    0.0011,    0.0054,    0.0007,    0.0008,
              -0.0022,    0.0071,    0.0007,    0.0098,    0.0100,
              -0.0020,    0.0060,    0.0008,    0.0100,    0.0123;

    //create expected result
    MatrixXd Xsig_aug_expected = MatrixXd(7, 15);
    Xsig_aug_expected << 5.7441,  5.85768,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,  5.63052,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,
                         1.38,  1.34566,  1.52806,     1.38,     1.38,     1.38,     1.38,     1.38,  1.41434,  1.23194,     1.38,     1.38,     1.38,     1.38,     1.38,
                       2.2049,  2.28414,  2.24557,  2.29582,   2.2049,   2.2049,  2.2049,   2.2049,  2.12566,  2.16423,  2.11398,   2.2049,   2.2049,   2.2049,   2.2049,
                       0.5015,  0.44339, 0.631886, 0.516923, 0.595227,  0.5015,   0.5015,   0.5015,  0.55961, 0.371114, 0.486077, 0.407773,   0.5015,   0.5015,   0.5015,
                       0.3528, 0.299973, 0.462123, 0.376339,  0.48417, 0.418721,   0.3528,   0.3528, 0.405627, 0.243477, 0.329261,  0.22143, 0.286879,   0.3528,   0.3528,
                            0,        0,        0,        0,        0,        0,  0.34641,        0,        0,        0,        0,        0,        0, -0.34641,        0,
                            0,        0,        0,        0,        0,        0,        0,  0.34641,        0,        0,        0,        0,        0,        0, -0.34641;

    //create sigma point matrix
    MatrixXd Xsig_aug;
    ukf.GenerateAugmentedSigmaPoints(Xsig_aug);

    return Xsig_aug.isApprox(Xsig_aug_expected, PRECISION);

}

bool testSigmaPointPrediction() {

    UKF ukf;

    //create example sigma point matrix
    MatrixXd Xsig_aug = MatrixXd(ukf.n_aug_, 2 * ukf.n_aug_ + 1);
             Xsig_aug <<
    5.7441,  5.85768,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.63052,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,   5.7441,
      1.38,  1.34566,  1.52806,     1.38,     1.38,     1.38,     1.38,     1.38,   1.41434,  1.23194,     1.38,     1.38,     1.38,     1.38,     1.38,
    2.2049,  2.28414,  2.24557,  2.29582,   2.2049,   2.2049,   2.2049,   2.2049,   2.12566,  2.16423,  2.11398,   2.2049,   2.2049,   2.2049,   2.2049,
    0.5015,  0.44339, 0.631886, 0.516923, 0.595227,   0.5015,   0.5015,   0.5015,   0.55961, 0.371114, 0.486077, 0.407773,   0.5015,   0.5015,   0.5015,
    0.3528, 0.299973, 0.462123, 0.376339,  0.48417, 0.418721,   0.3528,   0.3528,  0.405627, 0.243477, 0.329261,  0.22143, 0.286879,   0.3528,   0.3528,
         0,        0,        0,        0,        0,        0,  0.34641,        0,         0,        0,        0,        0,        0, -0.34641,        0,
         0,        0,        0,        0,        0,        0,        0,  0.34641,         0,        0,        0,        0,        0,        0, -0.34641;

    double delta_t = 0.1; //time diff in sec

    MatrixXd Xsig_pred_expected = MatrixXd(ukf.n_x_, 2 * ukf.n_aug_ + 1);
    Xsig_pred_expected <<
    5.93553, 6.06251, 5.92217, 5.9415, 5.92361, 5.93516, 5.93705, 5.93553, 5.80832, 5.94481, 5.92935, 5.94553, 5.93589, 5.93401, 5.93553,
    1.48939, 1.44673, 1.66484, 1.49719, 1.508, 1.49001, 1.49022, 1.48939, 1.5308, 1.31287, 1.48182, 1.46967, 1.48876, 1.48855, 1.48939,
    2.2049, 2.28414, 2.24557, 2.29582, 2.2049, 2.2049, 2.23954, 2.2049, 2.12566, 2.16423, 2.11398, 2.2049, 2.2049, 2.17026, 2.2049,
    0.53678, 0.473387, 0.678098, 0.554557, 0.643644, 0.543372, 0.53678, 0.538512, 0.600173, 0.395462, 0.519003, 0.429916, 0.530188, 0.53678, 0.535048,
    0.3528, 0.299973, 0.462123, 0.376339, 0.48417, 0.418721, 0.3528, 0.387441, 0.405627, 0.243477, 0.329261, 0.22143, 0.286879, 0.3528, 0.318159;

    ukf.SigmaPointPrediction(Xsig_aug, delta_t);

    return ukf.Xsig_pred_.isApprox(Xsig_pred_expected, PRECISION);
}

bool testPredictMeanAndCovariance() {

    UKF ukf;

    ukf.Xsig_pred_ = MatrixXd(ukf.n_x_, 2 * ukf.n_aug_ + 1);
    ukf.Xsig_pred_ <<
             5.9374,  6.0640,   5.925,  5.9436,  5.9266,  5.9374,  5.9389,  5.9374,  5.8106,  5.9457,  5.9310,  5.9465,  5.9374,  5.9359,  5.93744,
               1.48,  1.4436,   1.660,  1.4934,  1.5036,    1.48,  1.4868,    1.48,  1.5271,  1.3104,  1.4787,  1.4674,    1.48,  1.4851,    1.486,
              2.204,  2.2841,  2.2455,  2.2958,   2.204,   2.204,  2.2395,   2.204,  2.1256,  2.1642,  2.1139,   2.204,   2.204,  2.1702,   2.2049,
             0.5367, 0.47338, 0.67809, 0.55455, 0.64364, 0.54337,  0.5367, 0.53851, 0.60017, 0.39546, 0.51900, 0.42991, 0.530188,  0.5367, 0.535048,
              0.352, 0.29997, 0.46212, 0.37633,  0.4841, 0.41872,   0.352, 0.38744, 0.40562, 0.24347, 0.32926,  0.2214, 0.28687,   0.352, 0.318159;

    VectorXd x_expected = VectorXd(ukf.n_x_);
    x_expected << 5.93637, 1.49035, 2.20528, 0.536853, 0.353577;

    MatrixXd P_expected = MatrixXd(ukf.n_x_, ukf.n_x_);
    P_expected << 0.00543425, -0.0024053, 0.00341576, -0.00348196, -0.00299378,
                  -0.0024053, 0.010845, 0.0014923, 0.00980182, 0.00791091,
                  0.00341576, 0.0014923, 0.00580129, 0.000778632, 0.000792973,
                  -0.00348196, 0.00980182, 0.000778632, 0.0119238, 0.0112491,
                  -0.00299378, 0.00791091, 0.000792973, 0.0112491, 0.0126972;

    ukf.PredictMeanAndCovariance();

    //std::cout << "x_:" << std::endl << ukf.x_ << std::endl;
    //std::cout << "P_:" << std::endl << ukf.P_ << std::endl;

    return ukf.x_.isApprox(x_expected, PRECISION) && ukf.P_.isApprox(P_expected, PRECISION);
}

bool testPredictRadarMeasurement() {

    UKF ukf;

    ukf.Xsig_pred_ = MatrixXd(ukf.n_x_, 2 * ukf.n_aug_ + 1);
    ukf.Xsig_pred_ <<
             5.9374,  6.0640,   5.925,  5.9436,  5.9266,  5.9374,  5.9389,  5.9374,  5.8106,  5.9457,  5.9310,  5.9465,  5.9374,  5.9359,  5.93744,
               1.48,  1.4436,   1.660,  1.4934,  1.5036,    1.48,  1.4868,    1.48,  1.5271,  1.3104,  1.4787,  1.4674,    1.48,  1.4851,    1.486,
              2.204,  2.2841,  2.2455,  2.2958,   2.204,   2.204,  2.2395,   2.204,  2.1256,  2.1642,  2.1139,   2.204,   2.204,  2.1702,   2.2049,
             0.5367, 0.47338, 0.67809, 0.55455, 0.64364, 0.54337,  0.5367, 0.53851, 0.60017, 0.39546, 0.51900, 0.42991, 0.530188,  0.5367, 0.535048,
              0.352, 0.29997, 0.46212, 0.37633,  0.4841, 0.41872,   0.352, 0.38744, 0.40562, 0.24347, 0.32926,  0.2214, 0.28687,   0.352, 0.318159;

    MatrixXd Zsig;
    MatrixXd z_pred;
    MatrixXd S;
    ukf.PredictRadarMeasurement(Zsig, z_pred, S);

    VectorXd z_pred_expected = VectorXd(ukf.n_z_radar_);
    z_pred_expected << 6.12155, 0.245993, 2.10313;

    MatrixXd S_expected = MatrixXd(ukf.n_z_radar_, ukf.n_z_radar_);
    S_expected <<
                0.0946171, -0.000139448, 0.00407016,
                -0.000139448, 0.000617548, -0.000770652,
                0.00407016, -0.000770652, 0.0180917;

    //std::cout << "z_pred: " << std::endl << z_pred << std::endl;
    //std::cout << "S: " << std::endl << S << std::endl;

    return z_pred.isApprox(z_pred_expected, PRECISION) && S.isApprox(S_expected, PRECISION);
}

/*
 * Runs a suite of tests.
 *
 */
int main(int argc, char* argv[]) {

    int failures = 0;
    if (!testGenerateAugmentedSigmaPoints()) {
        std::cout << "[FAIL] testGenerateAugmentedSigmaPoints failed!" << std::endl;
        ++failures;
    }

    if (!testSigmaPointPrediction()) {
        std::cout << "[FAIL] testSigmaPointPrediction failed!" << std::endl;
        ++failures;
    }

    if (!testPredictMeanAndCovariance()) {
        std::cout << "[FAIL] testPredictMeanAndCovariance failed!" << std::endl;
        ++failures;
    }

    if (!testPredictRadarMeasurement()) {
        std::cout << "[FAIL] testPredictRadarMeasurement failed!" << std::endl;
        ++failures;
    }

    if (failures == 0) {
        std::cout << "[PASS] All tests passed." << std::endl;
    }
    else {
        std::cout << "[FAIL] " << failures << " test(s) failed!" << std::endl;
    }

    return 0;
}
